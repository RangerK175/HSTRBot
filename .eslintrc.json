{
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },

  "extends": "strongloop",

  "parserOptions": {
    "ecmaFeatures": {
      "ecmaVersion": 8,
      "jsx": false
    },
    "sourceType": "module"
  },

  "rules": {
    //
    // Possible Errors
    //
    // The following rules point out areas where you might have made mistakes.
    //
    "comma-dangle": 2,
    // disallow or enforce trailing commas

    "no-cond-assign": 2,
    // disallow assignment in conditional expressions

    "no-console": 1,
    // disallow use of console (off by default in the node environment)

    "no-constant-condition": 2,
    // disallow use of constant expressions in conditions

    "no-control-regex": 2,
    // disallow control characters in regular expressions

    "no-debugger": 2,
    // disallow use of debugger

    "no-dupe-args": 2,
    // disallow duplicate arguments in functions

    "no-dupe-keys": 2,
    // disallow duplicate keys when creating object literals

    "no-duplicate-case": 2,
    // disallow a duplicate case label.

    "no-empty": 2,
    // disallow empty statements

    "no-empty-character-class": 2,
    // disallow the use of empty character classes in regular expressions

    "no-ex-assign": 2,
    // disallow assigning to the exception in a catch block

    "no-extra-boolean-cast": 2,
    // disallow double-negation boolean casts in a boolean context

    "no-extra-parens": 0,
    // disallow unnecessary parentheses (off by default)

    "no-extra-semi": 2,
    // disallow unnecessary semicolons

    "no-func-assign": 2,
    // disallow overwriting functions written as function declarations

    "no-inner-declarations": 2,
    // disallow function or variable declarations in nested blocks

    "no-invalid-regexp": 2,
    // disallow invalid regular expression strings in the RegExp constructor

    "no-irregular-whitespace": 2,
    // disallow irregular whitespace outside of strings and comments

    "no-negated-in-lhs": 2,
    // disallow negation of the left operand of an in expression

    "no-obj-calls": 2,
    // disallow the use of object properties of the global object (Math and JSON) as functions

    "no-regex-spaces": 2,
    // disallow multiple spaces in a regular expression literal

    "no-sparse-arrays": 2,
    // disallow sparse arrays

    "no-unreachable": 2,
    // disallow unreachable statements after a return, throw, continue, or break statement

    "use-isnan": 2,
    // disallow comparisons with the value NaN

    "valid-jsdoc": 2,
    // Ensure JSDoc comments are valid (off by default)

    "valid-typeof": 2,
    // Ensure that the results of typeof are compared against a valid string


    //
    // Strict Mode
    //
    // These rules relate to using strict mode.
    //
    "strict": 0, // controls location of Use Strict Directives. 0: required by `babel-eslint`


    //
    // ECMAScript 6
    //
    // These rules are only relevant to ES6 environments.
    //
    "no-var": 1, // require let or const instead of var (off by default)
    "generator-star-spacing": [1, "before"], // enforce the spacing around the * in generator functions (off by default)

    //
    // Legacy
    //
    // The following rules are included for compatibility with JSHint and JSLint.
    // While the names of the rules may not match up with the JSHint/JSLint counterpart,
    // the functionality is the same.
    //
    "max-depth": [2, 3], // specify the maximum depth that blocks can be nested (off by default)
    "max-len": [2, 140, 2], // specify the maximum length of a line in your program (off by default)
    "max-params": [2, 5], // limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": 0, // specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": 0, // disallow use of bitwise operators (off by default)
    "no-plusplus": 2, // disallow use of unary operators, ++ and -- (off by default)

    //
    //Stylistic Issues
    //
    // These rules are purely matters of style and are quite subjective.
    //
    "indent": [1, 4], // this option sets a specific tab width for your code (off by default)
    "brace-style": 1, // enforce one true brace style (off by default)
    "camelcase": 1, // require camel case names
    "comma-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after comma
    "comma-style": [1, "last"], // enforce one true comma style (off by default)
    "consistent-this": [1, "_this"], // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 1, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, // require function expressions to have a name (off by default)
    "func-style": 0, // enforces use of function declarations or expressions (off by default)
    "key-spacing": [1, {"beforeColon": false, "afterColon": true}], // enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": [1, 3], // specify the maximum depth callbacks can be nested (off by default)
    "new-cap": [1, { "newIsCap": true, "capIsNew": false }], // require a capital letter for constructors
    "new-parens": 1, // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0, // allow/disallow an empty newline after var statement (off by default)
    "no-array-constructor": 1, // disallow use of the Array constructor
    "no-inline-comments": 1, // disallow comments inline after code (off by default)
    "no-lonely-if": 1, // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": 1, // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": [1, {"max": 2}], // disallow multiple empty lines (off by default)
    "no-nested-ternary": 1, // disallow nested ternary expressions (off by default)
    "no-new-object": 1, // disallow use of the Object constructor
    "no-spaced-func": 1, // disallow space between function identifier and application
    "no-ternary": 0, // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 1, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 1, // disallow dangling underscores in identifiers
    "one-var": [1, "never"], // allow just one var statement per function (off by default)
    "operator-assignment": [1, "never"], // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": [1, "never"], // enforce padding within blocks (off by default)
    "quote-props": [1, "as-needed"], // require quotes around object literal property names (off by default)
    "quotes": [1, "single", {"allowTemplateLiterals": true}], // specify whether double or single quotes should be used
    "semi": [1, "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": [1, {"before": false, "after": true}], // enforce spacing before and after semicolons
    "sort-vars": 0, // sort variables within the same declaration block (off by default)
    "space-before-blocks": [1, "always"], // require or disallow space before blocks (off by default)
    "space-before-function-paren": [1, {"anonymous": "always", "named": "never"}], // require or disallow space before function opening parenthesis (off by default)
    "space-in-parens": [1, "never"], // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": [1, {"int32Hint": true}], // require spaces around operators
    "keyword-spacing": [1], // require a space after return, throw, and case
    "space-unary-ops": [1, {"words": true, "nonwords": false}], // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": [1, "always"], // require or disallow a space immediately following the // in a line comment (off by default)
    "wrap-regex": 0 // require regex literals to be wrapped in parentheses (off by default)
  }
}